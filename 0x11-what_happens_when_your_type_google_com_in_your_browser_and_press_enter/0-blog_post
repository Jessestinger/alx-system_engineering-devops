"What is the purpose of a server?
A server functions as a program or device that offers services to another program and its user, known as the client. This structure is referred to as the client-server model.

The client-server arrangement
The client typically represents the entity that requests information. Clients commonly include internet-connected devices such as computers, laptops, or phones connected via Wi-Fi or mobile networks. Web-accessing software or browsers like Google Chrome, Firefox, or Safari serve as clients. In this example, the browser we utilize to enter www.google.com acts as the client.

The server acts as the entity that transmits or provides information to the client. It stores webpages, websites, or applications. In this case, the server would be the google server.

When a client device wishes to access a webpage, it requests a copy of the webpage from the server, which is then downloaded to the client and displayed in the user's web browser.

The Internet Phonebook
When we input the website name or address, also known as a URL (Uniform Resource Locator), such as https://www.google.com, into our browser and press Enter, the browser initially breaks down the URL into components. To accomplish this, we require the assistance of Domain Name System (DNS) servers. But first...

What exactly is a URL?
A URL serves as a means to access a website. It consists of various parts, including the protocol, hostname, port, path and file name, and more. For the purposes of this discussion, let's focus on the protocol and hostname. In the case of https://www.google.com, https signifies the protocol (more on that later), while www.google.com represents the hostname, which can be a domain name or an IP address.

DNS
Consider the Domain Name System (DNS) as the internet's phonebook! DNS servers function as application servers that convert domain names, which are easily understood by humans, into machine-readable IP addresses. Each internet-connected device possesses a unique IP address, which other machines use to locate the device.

The process, known as DNS resolution or DNS lookup, involves four steps (and servers) to load a webpage:

The DNS recursor serves as the initial point of contact. It is a server designed to receive queries from clients through applications like web browsers. If the server already has the IP address stored in its cache, it simply returns it. Otherwise, it is responsible for making additional requests by sending a query to the root DNS server.
The root server, or root nameserver, does not possess information about the hostname but knows where to find it. Hence, it directs the requests to the appropriate Top Level Domain (TLD) server.
The TLD server represents the next step in the search for a specific IP address. It hosts the final portion of a hostname. In the case of google.com, the TLD server would be "com." The request is then forwarded to the authoritative nameserver.
The authoritative nameserver serves as the last stop in the nameserver query. If this server has access to the requested record, it returns the IP address for the desired hostname to the DNS recursor that initiated the initial request. Otherwise, it sends an error indicating that the record could not be found.
Internet Protocol Suite
Now that the browser knows where to find www.google.com, it is time to establish a connection to access the requested website. Browsers employ internet protocols to facilitate such connections.

The Internet Protocol Suite, also known as TCP/IP (Transmission Control Protocol/Internet Protocol), serves as the most commonly used protocol for various types of HTTP requests. It encompasses a set of rules governing the format of data transmitted over the internet or local networks, including sending emails, streaming videos

Traffic and Security Control
Once the TCP connection is established, data transfer begins. However, before proceeding, traffic control is necessary. Enter the load balancer...

A load balancer, like HAProxy, acts as a server that assists in managing web traffic and preventing downtime. It receives traffic from the internet and distributes it among multiple servers to avoid overwhelming any particular server with excessive requests. Load balancers are essential for high-traffic websites like google.com. But can anyone gain access? This is where the firewall comes into play...

The firewall, whether in the form of software or hardware, functions as a device that blocks unauthorized access to or from private networks. It acts as a protective barrier between secure internal networks and vulnerable networks such as the internet. Decisions regarding allowing or denying traffic are based on a custom set of security rules, such as restrictions on request IP addresses, request frequency, or requested content type. A load balancer can also serve as a firewall. However, additional firewalls can be installed for enhanced security, protection, and to avoid a single point of failure (SPOF).

SSL
Given the importance of security in today's digital world, an extra security measure is implemented using Secure Socket Layer (SSL).

SSL functions as a protocol for servers and web browsers, ensuring that data exchanged between them remains private. This is achieved through the use of an SSL certificate, a small data file that establishes an encrypted link between a web server and a browser. This link guarantees the privacy of all data transmitted between the web server and the browser.

SSL proves particularly valuable when sharing sensitive information like credit card details, as it makes it impossible for eavesdroppers to decipher the data.

How can you determine if a website employs an SSL certificate? It's simple—just examine the URL. If you observe a padlock icon and https:// instead of http://, your privacy is protected. But what exactly is http/https?

HTTP/HTTPS
What is it?
HTTP stands for HyperText Transfer Protocol and represents the most commonly used application protocol on the World Wide Web. It facilitates communication between web browsers and web servers. HTTP is a stateless, text-based protocol.

Here's how it works: An HTTP client or web browser sends a request message to an HTTP server or web server, which, in turn, sends a response message. It is important to note that HTTP functions as a pull protocol, where the client retrieves information from the server instead of the server pushing information to the client.

HTTPS operates similarly to HTTP, but with an added layer of security. The additional letter 'S' denotes security and indicates the use of an SSL certificate.

HTTP Requests and Response Status Codes
HTTP requests can utilize various methods:

GET: Used to retrieve data from a web server.
POST: Used to send data to a web server.
PUT: Used to update data on a web server.
DELETE: Used to remove data from a web server.
An HTTP request always receives a response, typically accompanied by a status code indicating the success or failure of the request.

Web and Application Servers
A web server refers to computer software and underlying hardware that accepts requests via HTTP/HTTPS and serves static content such as simple HTML pages, images, or plain text files—content that does not change. The web server's role is to locate content corresponding to the requested website address and serve it as an HTTP/HTTPS response. Examples of web servers include Nginx or Apache.

However, most websites do not solely consist of static content. On the contrary, many web applications rely on dynamic content—content that changes. To enable this functionality, an application server is required.

An application server is a software program responsible for running applications, facilitating communication with database servers, managing user information, and more. It works in conjunction with web servers and utilizes static content from the web server to deliver dynamic applications.

Database
Another vital component in the client-server computing environment is the database server, which comprises the hardware and software running a database. A database serves as a collection of data, and the database server functions as the program that interacts with the database, enabling retrieval, addition, and modification of data within it. The two main types of databases are relational databases and non-relational databases. Popular examples of relational databases include PostgreSQL, MySQL, SQLite, and MariaDB.

The intention of this is to help you understand the process of what happens when we type www.google.com.

